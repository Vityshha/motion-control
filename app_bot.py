import os
import sys
import asyncio
import logging
from dotenv import load_dotenv
from datetime import datetime
from aiogram import Bot, Dispatcher, html, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from controllers.detector_manager import DetectorManager


load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

dp = Dispatcher()
detector_status = False  # –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: True ‚Äî –∑–∞–ø—É—â–µ–Ω, False ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
user_settings = {}
video_file_cache = []

detector = DetectorManager(model_mode="classic", yolo_model_path="yolo11x.pt", source=0)

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç")],
        [KeyboardButton(text="üõë –°—Ç–æ–ø")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton(text="üìú –ñ—É—Ä–Ω–∞–ª")]
    ],
    resize_keyboard=True
)

settings_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¶ YOLO-–º–æ–¥–µ–ª—å")],
        [KeyboardButton(text="üß† –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º")],
        [KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )


@dp.message(F.text == "üöÄ –°—Ç–∞—Ä—Ç")
async def handle_start(message: Message):
    global detector_status

    selected_model = user_settings.get(message.chat.id)
    if selected_model is None:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return

    detector.set_model_mode('yolo' if selected_model == "YOLO" else 'classic')
    detector.set_notification_target(bot=message.bot, chat_id=message.chat.id)
    detector.start()

    detector_status = True
    await message.answer("–î–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω.")



@dp.message(F.text == "üõë –°—Ç–æ–ø")
async def handle_stop(message: Message):
    global detector_status
    detector_status = False
    detector.stop()
    await message.answer("–î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings(message: Message):
    status_text = "üü¢ <b>–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω</b>" if detector_status else "üî¥ <b>–°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>"
    current_model = user_settings.get(message.chat.id, "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    await message.answer(
        f"{status_text}\n–ú–æ–¥–µ–ª—å: <b>{current_model}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=settings_keyboard
    )


@dp.message(F.text == "üì¶ YOLO-–º–æ–¥–µ–ª—å")
async def handle_yolo_choice(message: Message):
    user_settings[message.chat.id] = "YOLO"
    detector.set_model_mode('yolo')
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: YOLO ‚úÖ")



@dp.message(F.text == "üß† –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º")
async def handle_classic_choice(message: Message):
    user_settings[message.chat.id] = "classic"
    detector.set_model_mode('classic')
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º ‚úÖ")


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)


@dp.message(F.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª")
async def handle_clear_history(message: Message):
    deleted = 0

    if os.path.exists("videos"):
        for fname in os.listdir("videos"):
            try:
                os.remove(os.path.join("videos", fname))
                deleted += 1
            except Exception:
                pass

    if os.path.exists("log.txt"):
        try:
            os.remove("log.txt")
        except Exception:
            pass

    await message.answer(f"üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤: {deleted}")


def extract_timestamp(fname):
    try:
        timestamp_str = fname.split("_", 2)[:2]
        return datetime.strptime("_".join(timestamp_str), "%Y-%m-%d_%H-%M-%S")
    except Exception:
        return datetime.min

@dp.message(F.text == "üìú –ñ—É—Ä–Ω–∞–ª")
async def handle_log(message: Message):
    global video_file_cache

    if not os.path.exists("videos"):
        await message.answer("–ñ—É—Ä–Ω–∞–ª –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    files = sorted(os.listdir("videos"), key=extract_timestamp, reverse=False)
    if not files:
        await message.answer("–ñ—É—Ä–Ω–∞–ª –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    video_file_cache = files[:10]

    text = "üìº <b>–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:</b>\n\n"
    for i, fname in enumerate(video_file_cache):
        text += f"{i+1}. {fname}\n"

    text += "\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ (1‚Äì10)."
    await message.answer(text, parse_mode="HTML")


@dp.message()
async def send_video_by_index(msg: Message):
    global video_file_cache

    if msg.text.isdigit():
        idx = int(msg.text)
        if 1 <= idx <= len(video_file_cache):
            fname = video_file_cache[idx - 1]
            path = os.path.join("videos", fname)
            if os.path.exists(path):
                await msg.answer_video(FSInputFile(path), caption=f"üé• {fname}")
            else:
                await msg.answer("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")



async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
